stage := dev
overlays := k8s/overlays

kubectl := kubectl
kustomize := ${kubectl} kustomize ${overlays}/${stage}
# Set yq=yq on the command line or in your environment to use a faster local yq
yq ?= docker run -i --rm -v "${PWD}":/workdir mikefarah/yq

# Run yq in docker to avoid a local dependency
app :=  $(shell ${kustomize} | ${yq} '. | select(.kind=="Deployment" or .kind=="Job" or .kind=="CronJob")' \
	| ${yq} 'select(document_index == 0) | .metadata.name' )
namespace = $(shell ${kustomize} | ${yq} '. | select(.kind=="Deployment" or .kind=="Job" or .kind=="CronJob")' \
	| ${yq} 'select(document_index == 0) | .metadata.namespace' )
ifeq ($(namespace), )
$(error error: the deployment or job must include .metadata.namespace)
endif

# Build and run the app
all: build run

# Build the image
build:: 
	@true

# Remove all resources and images
clean::
	@true

# Print the results of previous targets
check::
	@true

# Dump the makefile config variables
config::
	@echo stage = ${stage}
	@echo app = ${app}
	@echo namespace = ${namespace}

# Deploy resources to k8s
deploy::
	@true

# List the available targets
help:
	@make -qp | awk -F':' '/^[a-z0-9][^$$#\/\t=]*:([^=]|$$)/ {split($$1,A,/ /);for(i in A)print A[i]}' | sort | uniq

# Login to the registry
login::
	@true

# Push to the registry
push::
	@true

# Delete all resources
purge::
	@true

# Create the initial ECR repo (needed for AWS ECR)
repo::
	@true

# Deploy, then test
run::
	@true

# Run tests
test::
	@true

